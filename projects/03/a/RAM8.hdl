// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
      // DMux to select load only to the addressed register
      DMux8Way (in=load, sel=address, a=r0load,
                                      b=r1load,
                                      c=r2load,
                                      d=r3load,
                                      e=r4load,
                                      f=r5load,
                                      g=r6load,
                                      h=r7load);

      // Create 8 registers that take in and load
      Register (in=in, load=r0load, out=r0);
      Register (in=in, load=r1load, out=r1);
      Register (in=in, load=r2load, out=r2);
      Register (in=in, load=r3load, out=r3);
      Register (in=in, load=r4load, out=r4);
      Register (in=in, load=r5load, out=r5);
      Register (in=in, load=r6load, out=r6);
      Register (in=in, load=r7load, out=r7);

      // Mux to retrieve the value of the register
      Mux8Way16 (a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, sel=address, out=out);
}
