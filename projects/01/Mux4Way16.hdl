// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Mux4Way16.hdl

/**
 * 4-way 16-bit multiplexor:
 * out = a if sel == 00 (0)
 *       b if sel == 01 (1)
 *       c if sel == 10 (2)
 *       d if sel == 11 (3)
 *
 * We first select between a and b or c and d
 * based on the lsb (rightmost) of sel -> 0[0].
 * If the bit is 0, we keep a and c, if it is 1, we keep b and d.
 * No we select based on the msb (leftmost) bit of sel -> [0]0.
 * Again we compare the winners of the first round based on this bit.
 *
 * ////////
 * Example:
 * sel = 01
 *
 * Round 1 sel[0]=1:
 * Mux (a, b) = b -> Mux: If s[0]=0 return a, if s[0]=1 return b
 * Mux (c, d) = d -> Mux: If s[0]=0 return c, if s[0]=1 return d
 *
 * Round 2 sel[1]=0:
 * Mux (b, d) = b -> Mux: If s[0]=0 return b, if s[0]=1 return d
 */

CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];

    PARTS:
    // first we choose based on the first bit of information between either
    // a and b or c and d.
    Mux16(a=a, b=b, sel=sel[0], out=AorBSelected);
    Mux16(a=c, b=d, sel=sel[0], out=CorDSelected);

    // the second bit of information (in sel) tells us whether or not we want
    // the winner from the first comparison or the winner from the second
    // comparison
    Mux16(a=AorBSelected, b=CorDSelected, sel=sel[1], out=out);
}
